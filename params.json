{"body":"### Lumumba Mobile - Cocoa Touch best practice extensions\r\n\r\nLumumba Mobile (lumobile) is a set of toolkit classes\r\nthat have helped my developing several iOS applications.\r\n\r\nIt's far from being a complete framework, but you may use any of it's code at your will.\r\n\r\n# Installation #\r\n\r\nI'm working on an easier way, but for now you have to clone the repository and create references to the files you want manually.\r\n\r\n1. Open a terminal and navigate to the project, \r\n   where you want to add the lumobile library\r\n\r\n2. add as a submodule from github\r\n\r\n  ```sh\r\n  git submodules add https://github.com/Tharabas/lumobile.git libs/lumobile\r\n  ```\r\n  where the ``libs/lumobile`` is just the path you want to put the library\r\n\r\n3. include the project in XCode\r\n\r\n  Add the files, you put under ``lib/lumobile`` to your project\r\n\r\n4. Include the lumobile.h where you want to use it\r\n\r\n  The most comfortable way would be to put it into your ``Prefix.pch``, wich is usually located under __Supporting Files__ in your XCode working tree.\r\n\r\n  ```objc\r\n  // for the framework\r\n  #import \"lumobile.h\"\r\n  // for cocos2d extensions\r\n  #import \"lumobile-cocos2d.h\"\r\n  ```\r\n\r\n# Categories #\r\n\r\nMost of the used categories will look like ``UIOriginalFile+TH`` as they are in the __TH__arabas namespace.\r\n\r\n## NSString ##\r\n\r\n``TODO: write a bit more``\r\n\r\n## NSArray ##\r\n\r\n### reversed ###\r\n\r\nReturns the reversed version of the NSArray\r\n\r\n### map ###\r\n\r\nReturns a new ``NSArray`` performing a block on every item of the ``NSArray``.\r\n\r\nAs an ``NSArray`` can not contain any ``nil`` value, returning ``nil`` will drop that value from the resulting ``NSArray``.\r\n\r\n### filter ###\r\n\r\nReturns a subset of the original ``NSArray`` that contains all elements, where the call of the block returned ``YES``.\r\n\r\n> In some cases you might be forced to coerce the return value to `(BOOL)` as the compiler would not accept it otherwise.\r\n\r\n``TODO: write a bit more``\r\n\r\n## NSDictionary ##\r\n\r\n``TODO: write a bit more``\r\n\r\n## UIColor ##\r\n\r\nEspecially the color classes needed an easy access point.\r\nThe ``THWebNamedColors`` caches a map of named colors with the default web names (css) of the colors.\r\nThus you can grab an NSColor with the value of __skyblue__ via ``[NSColor colorWithName:@\"skyblue\"]``\r\n\r\nA more generic parser version of this is ``[NSColor colorFromString:colorString]`` wich tries to parse\r\nany string into a NSColor.\r\n\r\nThat string2color parser allows even more stuff, like blending colors:\r\n\r\n50% white, 50% blue -> ``[UIColor colorFromString:@\"white <> blue\"]`` (see UIColor+TH for more details on this)\r\n\r\nIt even defines a (readonly) property __colorValue__ on a NSString, allowing you to use this:\r\n\r\n```objc\r\nNSColor *magenta   = @\"magenta\".colorValue;\r\nNSColor *pinkGlass = @\"pink\".colorValue.translucent;\r\n```\r\n\r\nAs well as another (readonly) property __colorValues__ on NSArray\r\n\r\n```objc\r\nNSArray *colors = @[[NSColor blackColor], \r\n                    [NSColor colorNamed:@\"pink\"],\r\n                    [NSColor colorNamed:@\"gold\"]\r\n                  ];\r\n// or simply\r\nNSArray *colors = @\"black pink gold\".words.colorValues;\r\n```\r\n\r\n# Some Objective-C Sugar\r\n\r\nLots and lots of times, you usually need to format NSStrings.\r\nEach time with `` [NSString stringWithFormat:format, arg1, arg2, arg3, ...] ``\r\n\r\nThis can be shortened to `` $(format, arg1, arg2, arg3, ...) `` using the ``$`` macro.\r\n\r\nAs well as `` [NSArray arrayWithObjects:o1, o2, o3, ..., nil] ``\r\n\r\nMay be written as `` $array(o1,o2,o3) ``\r\n\r\n__Note:__ As with **clang 4.1** the ``$array(...)`` and ``$map(...)`` features are __deprecated__ as you can use the ``@[...]`` and ``@{...}`` compiler features. That's even more awesome and just fixes the need for my macros.\r\n\r\nThere are other _preprocessor macros_ that do similar things.\r\n\r\n## A thin layer for geometric calculus\r\n\r\nLook for ``THPoint``, ``THSize``, ``THRect`` in the sources.\r\n\r\n_... more details on that later ..._\r\n\r\n# Extensions\r\n\r\n## cocos2d\r\n\r\nI've worked with Cocos2d (great Framework for 2d stuff) but found some nuisance, that have been __corrected__ my way by creating categories for them.\r\nYou may find those under ``/extensions/cocos2d``.\r\n\r\n# DISCLAIMER\r\n\r\nAll those components, snippets and code fragments have been created,\r\nbecause I either used them very often and thought, there should be\r\nan easier way to do this, or because I simply did not know that there\r\nis another way to do this in Objective-C.\r\n\r\nI do neither claim all things to be flawless nor perfect to fit _your_ Apps.\r\n\r\nI'm absolutely aware, that _preprocessor macros_ may be considered evil,\r\nas they obscure code. That may be right, but they can also be used to considerably\r\n_clean up the code_, what would be desired behaviour.\r\n\r\nAnyway they are a feature of the c environment.\r\n\r\nYou may use it or you may leave it. Still your decision.\r\n\r\nConstructive comments are welcome, anytime, though.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Lumobile","tagline":"Lumumba Mobile - my iOS utility belt"}